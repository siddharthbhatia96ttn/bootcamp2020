{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthbhatia/Desktop/BurgerApp/my-app/src/containers/checkout/contactdata/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/ui/button/Button';\nimport Spinner from '../../../components/ui/spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../Axios-Orders';\nimport Input from '../../../components/ui/input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'COD',\n              displayValue: 'Cash on Delivery'\n            }, {\n              value: 'CC',\n              displayValue: 'Credit Card'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredent: this.props.ingredent,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n      console.log(this.props.ingredent);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length >= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touchd: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 12\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }\n    }, \"Enter your Contact data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/siddharthbhatia/Desktop/BurgerApp/my-app/src/containers/checkout/contactdata/ContactData.js"],"names":["React","Component","Button","Spinner","classes","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredent","props","price","orderData","post","then","response","history","push","catch","error","console","log","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '../../../components/ui/button/Button';\nimport Spinner from '../../../components/ui/spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../Axios-Orders';\nimport Input from '../../../components/ui/input/Input';\n\nclass ContactData extends Component{\n  state = {\n      orderForm: {\n          name: {\n              elementType: 'input',\n              elementConfig: {\n                  type: 'text',\n                  placeholder: 'Your Name'\n              },\n              value: '',\n              validation:{\n                required:true\n              },\n              valid:false,\n              touched:false\n          },\n          street: {\n              elementType: 'input',\n              elementConfig: {\n                  type: 'text',\n                  placeholder: 'Street'\n              },\n              value: '',validation:{\n                required:true\n              },\n              valid:false,\n                touched:false\n          },\n          zipCode: {\n              elementType: 'input',\n              elementConfig: {\n                  type: 'text',\n                  placeholder: 'ZIP Code'\n              },\n              value: '',\n              validation:{\n                required:true,\n                minLength:5,\n                maxLength:5\n              },\n              valid:false,\n                touched:false\n          },\n          country: {\n              elementType: 'input',\n              elementConfig: {\n                  type: 'text',\n                  placeholder: 'Country'\n              },\n              value: '',validation:{\n                required:true\n              },\n              valid:false,\n                touched:false\n          },\n          email: {\n              elementType: 'input',\n              elementConfig: {\n                  type: 'email',\n                  placeholder: 'Your E-Mail'\n              },\n              value: '',validation:{\n                required:true\n              },\n              valid:false,\n                touched:false\n          },\n          deliveryMethod: {\n              elementType: 'select',\n              elementConfig: {\n                  options: [\n                    {value:'COD',displayValue:'Cash on Delivery'},\n           {value:'CC',displayValue:'Credit Card'},\n                  ]\n              },\n              value: ''\n          }\n      },\n      loading: false\n  }\n  orderHandler=(event)=>{\n    event.preventDefault();\n    this.setState({ loading:true });\n    const formData={};\n    for(let formElementIdentifier in this.state.orderForm){\n      formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\n    }\n    const order={\n      ingredent:this.props.ingredent,\n      price:this.props.price,\n      orderData:formData\n    }\n     axios.post('/orders.json',order)\n    .then(response=>{\n      this.setState({loading:false});\n      this.props.history.push('/');\n    })\n    .catch(error=>{\n        this.setState({loading:false})\n    });\n    console.log(this.props.ingredent);\n  }\n  checkValidity(value,rules){\n    let isValid=true;\n\n    if(rules.required){\n      isValid=value.trim() !== '' && isValid;\n    }\n  if(rules.minLength){\n    isValid=value.length>=rules.minLength && isValid;\n  }\n  if(rules.maxLength){\n    isValid=value.length>=rules.maxLength && isValid;\n  }\n    return isValid;\n}\n  inputChangedHandler=(event,inputIdentifier)=>{\n    const updatedOrderForm={\n      ...this.state.orderForm\n    }\n  const updatedFormElement={\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value=event.target.value;\n    updatedFormElement.valid=this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n    updatedFormElement.touched=true;\n    updatedOrderForm[inputIdentifier]=updatedFormElement;\n    console.log(updatedFormElement);\n    this.setState({orderForm:updatedOrderForm});\n  }\n\n\n  render(){\n    const formElementsArray=[];\n    for (let key in this.state.orderForm)\n    {\n      formElementsArray.push({\n        id:key,\n        config:this.state.orderForm[key]\n      })\n    }\n    let form=(\n      <form onSubmit={this.orderHandler}>\n      {formElementsArray.map(formElement=>(\n        <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touchd={formElement.config.touched}\n        changed={(event)=>this.inputChangedHandler(event,formElement.id)}\n        />\n      ))}\n            <Button btnType=\"Success\" >Order</Button>\n      </form>\n    );\n    if(this.state.loading){\n      form=<Spinner/>;\n    }\n    return(\n    <div className={classes.ContactData}>\n    <h4>Enter your Contact data</h4>\n    {form}\n    </div>\n  );\n  }\n}\nexport default ContactData;\n"]},"metadata":{},"sourceType":"module"}